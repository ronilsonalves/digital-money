stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-docker-imgs:       # This job runs in the build stage, which runs first.

  image: docker:latest
  stage: build
  services:
   - name: docker:dind
     alias: dockerhost
  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: tcp://dockerhost:2375/
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag="develop"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - echo "Building keycloak sec docker img..."
    - echo ls -a
    - docker build -t "auth-service:${tag}" -f Dockerfile ./keycloak
    - docker push "auth-service:${tag}"  

    - echo "Building service-discovery docker img..."
    - docker build -t "discovery:${tag}" -f Dockerfile ./service-discovery
    - docker push "discovery:${tag}"

    - echo "Building users-service docker img...." 
    - docker build -t "users-service:${tag}" -f Dockerfile ./users-service
    - docker push "users-service:${tag}"

    - echo "Building accounts-service docker img..."
    - docker build -t "accounts-service:${tag}" -f Dockerfile ./account-service
    - docker push "accounts-service:${tag}"

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
